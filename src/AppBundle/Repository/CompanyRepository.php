<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Company;
use AppBundle\Entity\Driver;
use Doctrine\ORM\EntityRepository;

/**
 * CompanyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CompanyRepository extends EntityRepository
{

    // sacar el usuario de una compaÃ±ia con el id del usuario
    public function getCompanyNameAddress($user_id)
    {
        
        $sql = "SELECT company.name, company.address FROM company , user WHERE :user_id = company.user_id";
        $params = array(
            'user_id' => $user_id
        );

        $results = $this->getEntityManager()->getConnection()->executeQuery($sql, $params)->fetchAll();


        return $results;
    }
    function getAllCars($idCompany)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            "SELECT car.plate, car.trademark, car.model, car.version FROM AppBundle\Entity\Car car, AppBundle\Entity\Company c WHERE car.company=c.id and c.id=:id"
        )->setParameter("id", $idCompany);
        return $query->getArrayResult();
    }

    function getAllDrivers($idCompany)
    {
        $con = $this->getEntityManager();
        $query = $con->createQuery(
            "SELECT d.name, d.state, car.trademark FROM
            AppBundle\Entity\Driver d, AppBundle\Entity\Company c, AppBundle\Entity\User u, AppBundle\Entity\Car car
            WHERE u.id=c.user and d.company=c.id and (d.car=car.id or d.car is null) and c.id=:id"
        )->setParameter("id", $idCompany);
        return $query->getArrayResult();
    }

    function getDriversWithoutCar($idCompany){
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            "SELECT d.name, d.state, car.trademark FROM
            AppBundle\Entity\Driver d, AppBundle\Entity\Company c, AppBundle\Entity\User u, AppBundle\Entity\Car car
            WHERE u.id=c.user and d.company=c.id and d.car is null and c.id=:id"
        )->setParameter("id", $idCompany);
        return $query->getArrayResult();
    }

    function getDriversWithCar($idCompany){
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            "SELECT d.name, d.state, car.trademark FROM
            AppBundle\Entity\Driver d, AppBundle\Entity\Company c, AppBundle\Entity\User u, AppBundle\Entity\Car car
            WHERE u.id=c.user and d.company=c.id and d.car=car.id and c.id=:id"
        )->setParameter("id", $idCompany);
        return $query->getArrayResult();
    }

    function getStoppedDrivers($idCompany){
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            "SELECT d.name, d.state, car.plate, car.trademark, car.model, car.version FROM
            AppBundle\Entity\Driver d, AppBundle\Entity\Company c, AppBundle\Entity\User u, AppBundle\Entity\Car car
            WHERE u.id=c.user and d.company=c.id and d.state='stopped' and c.id=:id"
        )->setParameter("id", $idCompany);
        return $query->getArrayResult();
    }


    function getAvalaibledDrivers($idCompany){
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            "SELECT d.name, d.state, car.plate, car.trademark, car.model, car.version FROM
            AppBundle\Entity\Driver d, AppBundle\Entity\Company c, AppBundle\Entity\User u, AppBundle\Entity\Car car
            WHERE u.id=c.user and d.company=c.id and d.state='avalaible' and c.id=:id"
        )->setParameter("id", $idCompany);
        return $query->getArrayResult();
    }

    function getUnavalaibledDrivers($idCompany){
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            "SELECT d.name, d.state, car.plate, car.trademark, car.model, car.version FROM
            AppBundle\Entity\Driver d, AppBundle\Entity\Company c, AppBundle\Entity\User u, AppBundle\Entity\Car car
            WHERE u.id=c.user and d.company=c.id and d.state='avalaible' and c.id=:id"
        )->setParameter("id", $idCompany);
        return $query->getArrayResult();
    }

    function getDamagedCar($idCompany)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            "SELECT car.plate, car.trademark, car.model, car.version, car.state FROM AppBundle\Entity\Car car, AppBundle\Entity\Company c WHERE car.state='damaged' and car.company=c.id and c.id=:id"
        )->setParameter("id", $idCompany);
        return $query->getArrayResult();
    }


    function getInRepairCar($idCompany)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            "SELECT car.plate, car.trademark, car.model, car.version, car.state FROM AppBundle\Entity\Car car, AppBundle\Entity\Company c WHERE car.state='in repair' andcar.company=c.id and c.id=:id"
        )->setParameter("id", $idCompany);
        return $query->getArrayResult();
    }


    function getAvalaibleCar($idCompany)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            "SELECT car.plate, car.trademark, car.model, car.version, car.state FROM AppBundle\Entity\Car car, AppBundle\Entity\Company c WHERE car.state='avalaible' and car.company=c.id and c.id=:id"
        )->setParameter("id", $idCompany);
        return $query->getArrayResult();

    }

    function getCarWithoutDriver($idCompany){
        $em = $this->getEntityManager();
        $con = $em->getConnection();
        $sql = "SELECT
        * 
        FROM car, company WHERE car.company_id=company.id
        AND company.id=:id
        AND car.id NOT IN (SELECT car.id
        FROM car, driver
        WHERE car.id=driver.car_id)";
        $query = $con->prepare($sql);
        $query->bindValue("id",$idCompany);
        $query->execute();
        $results = $query->fetchAll();
        return $results;
    }

    public function addCarToCompany(Request $request){



    }

}
