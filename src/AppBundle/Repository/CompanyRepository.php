<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Company;
use AppBundle\Entity\Driver;
use Doctrine\ORM\EntityRepository;
use PDO;
/**
 * CompanyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CompanyRepository extends EntityRepository
{

    /**
     * Execute query
     *
     * @param [type] $query
     * @param [type] $parameters
     * @param [type] $where
     * @param [type] $groupBy
     * @param [type] $orderBy
     * @param [type] $having
     * @return void
     */
    public function executeQuery($query, $parameters, $where = null, $groupBy = null, $orderBy = null, $having = null){
        
        /** @var EntityManager $em */
        $em = $this->getEntityManager();
        $sqlConnection = $em->getConnection();

        if(!is_null($where))
            $query .= $where;

        if(!is_null($groupBy))
            $query .= $groupBy;

        if(!is_null($having))
            $query .= $having;                

        if(!is_null($orderBy))
            $query .= $orderBy;
    
        // var_dump($query);
        // die();
        // Ejecutamos la consulta
        $qr = $sqlConnection->prepare($query);
        $qr->execute($parameters);

        /* Resultado de la Query */
        $result = $qr->fetchAll(PDO::FETCH_ASSOC);

        return $result;

    }

    /**
     * Get all cars of company
     *
     * @param [type] $params
     * @param [type] $company_id
     * @return void
     */
    public function getAllCars($params, $company_id){

        $search = json_decode($params['search']['value'], true);

        // var_dump($params);
        // die();

        // dump($params);
        // die();
        // Definimos las columnas
        $columns = array(
            0 => 'plate',
            1 => 'trademark',
            2 => 'model',
            3 => 'version',
            4 => 'state'
        );

        // Inicializamos los strings que van a concatenar la consulta.
        $where = $query = $queryCount = $orderBy = $groupBy =  $having = "";

        $parameters = array();

        $query = "SELECT ca.id,ca.plate,ca.trademark,ca.model,ca.version,ca.state FROM car as ca, company as co where ca.company_id = co.id and ca.company_id = :company_id";

        $queryCount = "SELECT COUNT(*) as total FROM car as ca, company as co where ca.company_id = co.id AND co.id = :company_id";

        if (isset($search["plate"]) AND $search["plate"]){
            $where .= " AND ca.plate LIKE '%". $search["plate"] ."%'";
        }

        if (isset($search["model"]) AND $search["model"]){
            $where .= " AND ca.model LIKE '%". $search["model"] ."%'";
        }

        
        if (isset($search["state"]) AND $search["state"]){
            $where .= " AND ca.state LIKE '%". $search["state"] ."%'";
        }

        //CREAMOS EL ORDER BY CON EL LIMIT aparte
        $limit=" ";
        
        if($params['length'] != -1 ){
            $limit="  LIMIT ".$params['start']." ,".$params['length']." ";
        }
        
        $orderBy .= " ORDER BY ". $columns[$params['order'][0]['column']]."   ".$params['order'][0]['dir'] . $limit;

        // CREAMOS EL GROUP BY aparte
        $groupBy .= " GROUP BY ca.id";

        $parameters = array();
        $parameters[":company_id"] = $company_id;

        // Ejecutamos todas las consultas que nos hacen falta para realizar el datatable
        $totalRecord = $this->executeQuery($queryCount, $parameters);   
        $totalRecordFilter = $this->executeQuery($queryCount, $parameters, $where);
        $data = $this->executeQuery($query, $parameters, $where, $groupBy, $orderBy, $having);

        $result = array (
            'draw'              => intval($params['draw']),
            'recordsTotal'      => $totalRecord[0]['total'],
            'recordsFiltered'   => $totalRecordFilter[0]['total'],
            'data'              => $data
        );

        return $result;

    }

    /**
     * Get all drivers of company
     *
     * @param [type] $params
     * @param [type] $company_id
     * @return void
     */
    public function getAllDrivers($params, $company_id){
        $search = json_decode($params['search']['value'], true);
        // dump($params);
        // die();
        // Definimos las columnas
        $columns = array(
            0 => 'name',
            1 => 'last_name',
            2 => 'state',
            2=> 'plate'
        );
        // Inicializamos los strings que van a concatenar la consulta.
        $where = $query = $queryCount = $orderBy = $groupBy =  $having = "";
        $parameters = array();



        $query = "SELECT d.id,u.name, u.last_name,d.state, c.plate
        FROM user as u, driver AS d, car AS c
        WHERE u.id = d.user_id
        AND d.car_id = c.id
        AND u.companys_id = :company_id
        
        
        UNION 

        
        SELECT d.id,u.name, u.last_name,d.state, 'sin asignar'
        FROM user as u, driver AS d
        WHERE u.id = d.user_id
        AND d.car_id is null
        AND u.companys_id = :company_id;

        ";


        $queryCount = "SELECT COUNT(*) as total 
        FROM driver AS d, user as u 
        where u.id = d.user_id    
        AND u.companys_id = :company_id";
        if (isset($search["name"]) AND $search["name"]){
            $where .= " AND u.name LIKE '%". $search["name"] ."%'";
        }
        if (isset($search["last_name"]) AND $search["last_name"]){
            $where .= " AND u.last_name LIKE '%". $search["last_name"] ."%'";
        }
        if (isset($search["state"]) AND $search["state"]){
            $where .= " AND d.state LIKE '%". $search["state"] ."%'";
        }
        //CREAMOS EL ORDER BY CON EL LIMIT aparte
        $limit=" ";
        if($params['length'] != -1 ){
            $limit="  LIMIT ".$params['start']." ,".$params['length']." ";
        }
        $orderBy .= " ORDER BY ". $columns[$params['order'][0]['column']]."   ".$params['order'][0]['dir'] . $limit;
        // CREAMOS EL GROUP BY aparte
        $groupBy .= " GROUP BY d.id";
        $parameters = array();
        $parameters[":company_id"] = $company_id;
        // Ejecutamos todas las consultas que nos hacen falta para realizar el datatable
        $totalRecord = $this->executeQuery($queryCount, $parameters);   
        $totalRecordFilter = $this->executeQuery($queryCount, $parameters, $where);
        $data = $this->executeQuery($query, $parameters, $where, $groupBy, $orderBy, $having);
        $result = array (
            'draw'              => intval($params['draw']),
            'recordsTotal'      => $totalRecord[0]['total'],
            'recordsFiltered'   => $totalRecordFilter[0]['total'],
            'data'              => $data
        );
        return $result;
    }


    function getDriversWithoutCar($idCompany){
        $em = $this->getEntityManager();
        $con = $em->getConnection();
        $sql = "SELECT driver.id,user.name, user.last_name, driver.state
            FROM user, driver, company
            WHERE company.id=:id
                AND user.id=driver.user_id
                AND user.companys_id=company.id
                AND driver.car_id IS NULL;";
        $query = $con->prepare($sql);
        $query->bindValue("id",$idCompany);
        $query->execute();
        $results = $query->fetchAll();
        return $results;
    }



    function getDriversWithCar($idCompany){
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            "SELECT d.name, d.state, car.trademark FROM
            AppBundle\Entity\Driver d, AppBundle\Entity\Company c, AppBundle\Entity\User u, AppBundle\Entity\Car car
            WHERE u.id=c.user and d.company=c.id and d.car=car.id and c.id=:id"
        )->setParameter("id", $idCompany);
        return $query->getArrayResult();
    }

    function getStoppedDrivers($idCompany){
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            "SELECT d.name, d.state, car.plate, car.trademark, car.model, car.version FROM
            AppBundle\Entity\Driver d, AppBundle\Entity\Company c, AppBundle\Entity\User u, AppBundle\Entity\Car car
            WHERE u.id=c.user and d.company=c.id and d.state='stopped' and c.id=:id"
        )->setParameter("id", $idCompany);
        return $query->getArrayResult();
    }


    function getAvalaibledDrivers($idCompany){
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            "SELECT d.name, d.state, car.plate, car.trademark, car.model, car.version FROM
            AppBundle\Entity\Driver d, AppBundle\Entity\Company c, AppBundle\Entity\User u, AppBundle\Entity\Car car
            WHERE u.id=c.user and d.company=c.id and d.state='avalaible' and c.id=:id"
        )->setParameter("id", $idCompany);
        return $query->getArrayResult();
    }

    function getUnavalaibledDrivers($idCompany){
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            "SELECT d.name, d.state, car.plate, car.trademark, car.model, car.version FROM
            AppBundle\Entity\Driver d, AppBundle\Entity\Company c, AppBundle\Entity\User u, AppBundle\Entity\Car car
            WHERE u.id=c.user and d.company=c.id and d.state='avalaible' and c.id=:id"
        )->setParameter("id", $idCompany);
        return $query->getArrayResult();
    }

    function getDamagedCar($idCompany)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            "SELECT car.plate, car.trademark, car.model, car.version, car.state FROM AppBundle\Entity\Car car, AppBundle\Entity\Company c WHERE car.state='damaged' and car.company=c.id and c.id=:id"
        )->setParameter("id", $idCompany);
        return $query->getArrayResult();
    }


    function getInRepairCar($idCompany)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            "SELECT car.plate, car.trademark, car.model, car.version, car.state FROM AppBundle\Entity\Car car, AppBundle\Entity\Company c WHERE car.state='in repair' andcar.company=c.id and c.id=:id"
        )->setParameter("id", $idCompany);
        return $query->getArrayResult();
    }


    function getAvalaibleCar($idCompany)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            "SELECT car.plate, car.trademark, car.model, car.version, car.state FROM AppBundle\Entity\Car car, AppBundle\Entity\Company c WHERE car.state='avalaible' and car.company=c.id and c.id=:id"
        )->setParameter("id", $idCompany);
        return $query->getArrayResult();

    }

    function getCarWithoutDriver($idCompany){
        $em = $this->getEntityManager();
        $con = $em->getConnection();
        $sql = "SELECT
                car.id, car.trademark, car.model, car.plate ,car.version
            FROM car
            JOIN company as c on c.id=car.company_id            
                WHERE c.id=:id
                AND car.id NOT IN (SELECT car.id
                    FROM car
                    JOIN driver as d on car.id=d.car_id)";
        $query = $con->prepare($sql);
        $query->bindValue("id",$idCompany);
        $query->execute();
        $results = $query->fetchAll();
        return $results;
    }

    public function existDriver($idCompany, $idDriver){
        $em = $this->getEntityManager();
        $driver = $em->getRepository("AppBundle:Driver")->findOneById($idDriver);
        if(!$driver)
            return false;
        $con = $em->getConnection();
        $sql = "SELECT * from  driver, user where driver.id=:idDriver and user.id=driver.user_id and user.companys_id=:idCompany";
        $query = $con->prepare($sql);
        $query->bindValue("idDriver",$idDriver);
        $query->bindValue("idCompany",$idCompany);
        $query->execute();
        $results = $query->fetchAll();
        return empty($results);
    }

    public function existCar($idCompany, $idCar){
        $em = $this->getEntityManager();
        $car = $em->getRepository("AppBundle:Car")->findOneById($idCar);
        if(!$car)
            return false;
        $con = $em->getConnection();
        $sql = "SELECT * from  car, company where car.id=:idCar and car.company_id=:idCompany";
        $query = $con->prepare($sql);
        $query->bindValue("idCar",$idCar);
        $query->bindValue("idCompany",$idCompany);
        $query->execute();
        $results = $query->fetchAll();
        return empty($results);
    }

    public function asignCarToCompany($idDriver, $idCar){
        $em = $this->getEntityManager();
        $car = $em->getRepository("AppBundle:Car")->findOneById($idCar);
        $driver = $em->getRepository("AppBundle:Driver")->findOneById($idDriver);
        $driver->setCar($car);
        $em->persist($driver);
        $em->flush();
    }

}
